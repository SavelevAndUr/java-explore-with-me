-- База данных для основного сервиса
CREATE DATABASE explore_with_me;

\c explore_with_me;

-- Таблица пользователей
CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(250) NOT NULL,
    email VARCHAR(254) NOT NULL UNIQUE
);

-- Таблица категорий
CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

-- Таблица событий (ИСПРАВЛЕНО: изменены типы на TEXT для корректной работы с функциями)
CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation TEXT NOT NULL,  -- Изменено с VARCHAR(2000) на TEXT
    category_id BIGINT NOT NULL REFERENCES categories(id) ON DELETE RESTRICT,
    created_on TIMESTAMP WITHOUT TIME ZONE,
    description TEXT,  -- Изменено с VARCHAR(7000) на TEXT
    event_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    initiator_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    lat FLOAT NOT NULL,
    lon FLOAT NOT NULL,
    paid BOOLEAN DEFAULT FALSE NOT NULL,
    participant_limit INTEGER DEFAULT 0,
    published_on TIMESTAMP WITHOUT TIME ZONE,
    request_moderation BOOLEAN DEFAULT TRUE,
    state VARCHAR(20) DEFAULT 'PENDING',
    title VARCHAR(120) NOT NULL
);

-- Индексы для таблицы событий
CREATE INDEX IF NOT EXISTS idx_events_category ON events(category_id);
CREATE INDEX IF NOT EXISTS idx_events_initiator ON events(initiator_id);
CREATE INDEX IF NOT EXISTS idx_events_state ON events(state);
CREATE INDEX IF NOT EXISTS idx_events_event_date ON events(event_date);
-- Добавлены индексы для полнотекстового поиска
CREATE INDEX IF NOT EXISTS idx_events_annotation_trgm ON events USING gin (annotation gin_trgm_ops);
CREATE INDEX IF NOT EXISTS idx_events_description_trgm ON events USING gin (description gin_trgm_ops);

-- Таблица запросов на участие
CREATE TABLE IF NOT EXISTS participation_requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created TIMESTAMP WITHOUT TIME ZONE,
    event_id BIGINT NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    requester_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    status VARCHAR(20) DEFAULT 'PENDING',
    CONSTRAINT uq_request UNIQUE (event_id, requester_id)
);

-- Индексы для таблицы запросов
CREATE INDEX IF NOT EXISTS idx_requests_event ON participation_requests(event_id);
CREATE INDEX IF NOT EXISTS idx_requests_requester ON participation_requests(requester_id);
CREATE INDEX IF NOT EXISTS idx_requests_status ON participation_requests(status);

-- Таблица подборок
CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned BOOLEAN DEFAULT FALSE,
    title VARCHAR(50) NOT NULL UNIQUE  -- Добавлено UNIQUE constraint
);

-- Связующая таблица для событий в подборках
CREATE TABLE IF NOT EXISTS compilation_events (
    compilation_id BIGINT NOT NULL REFERENCES compilations(id) ON DELETE CASCADE,
    event_id BIGINT NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    PRIMARY KEY (compilation_id, event_id)
);

-- Индекс для связующей таблицы
CREATE INDEX IF NOT EXISTS idx_compilation_events_compilation ON compilation_events(compilation_id);
CREATE INDEX IF NOT EXISTS idx_compilation_events_event ON compilation_events(event_id);

-- База данных для статистики
CREATE DATABASE stats;

\c stats;

-- Таблица для хранения статистики
CREATE TABLE IF NOT EXISTS stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    app VARCHAR(32) NOT NULL,
    uri VARCHAR(128) NOT NULL,
    ip VARCHAR(16) NOT NULL,
    timestamp TIMESTAMP WITHOUT TIME ZONE NOT NULL
);

-- Индексы для таблицы статистики
CREATE INDEX IF NOT EXISTS idx_stats_timestamp ON stats(timestamp);
CREATE INDEX IF NOT EXISTS idx_stats_uri ON stats(uri);
CREATE INDEX IF NOT EXISTS idx_stats_ip ON stats(ip);
CREATE INDEX IF NOT EXISTS idx_stats_app ON stats(app);

-- Составной индекс для часто используемых запросов
CREATE INDEX IF NOT EXISTS idx_stats_uri_timestamp ON stats(uri, timestamp);
CREATE INDEX IF NOT EXISTS idx_stats_app_timestamp ON stats(app, timestamp);

-- Функция для триграммного поиска (необходима для полнотекстового поиска)
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- Комментарии к таблицам для документации
COMMENT ON TABLE users IS 'Таблица пользователей системы';
COMMENT ON TABLE categories IS 'Таблица категорий событий';
COMMENT ON TABLE events IS 'Таблица событий с информацией о мероприятиях';
COMMENT ON TABLE participation_requests IS 'Таблица запросов на участие в событиях';
COMMENT ON TABLE compilations IS 'Таблица подборок событий';
COMMENT ON TABLE compilation_events IS 'Связующая таблица для событий в подборках';
COMMENT ON TABLE stats IS 'Таблица для хранения статистики просмотров';

-- Представление для удобства получения статистики
CREATE OR REPLACE VIEW view_stats AS
SELECT
    app,
    uri,
    COUNT(*) as hits,
    COUNT(DISTINCT ip) as unique_hits
FROM stats
GROUP BY app, uri
ORDER BY hits DESC;

-- Функция для получения статистики за период
CREATE OR REPLACE FUNCTION get_stats(
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    uris TEXT[] DEFAULT NULL,
    unique_only BOOLEAN DEFAULT FALSE
)
RETURNS TABLE (
    app VARCHAR,
    uri VARCHAR,
    hits BIGINT
) AS $$
BEGIN
    IF unique_only THEN
        RETURN QUERY
        SELECT
            s.app,
            s.uri,
            COUNT(DISTINCT s.ip) as hits
        FROM stats s
        WHERE s.timestamp BETWEEN start_time AND end_time
          AND (uris IS NULL OR s.uri = ANY(uris))
        GROUP BY s.app, s.uri
        ORDER BY hits DESC;
    ELSE
        RETURN QUERY
        SELECT
            s.app,
            s.uri,
            COUNT(*) as hits
        FROM stats s
        WHERE s.timestamp BETWEEN start_time AND end_time
          AND (uris IS NULL OR s.uri = ANY(uris))
        GROUP BY s.app, s.uri
        ORDER BY hits DESC;
    END IF;
END;
$$ LANGUAGE plpgsql;